import { config } from './config/config';
import { ErrorStatus, sendResponse } from './utils/response';
require('dotenv').config()
import express from 'express';
import cookieParser from 'cookie-parser';
const swaggerUi = require('swagger-ui-express');
const swaggerJsDoc = require('swagger-jsdoc');

const cors = require('cors');

const app = express();

// app.use(logger('dev'));
app.use(express.json());
app.use(express.urlencoded({ extended: false }));
app.use(cookieParser());
app.use(cors());

// Routes and Handlers
app.use((req, res, next) => {
  const ip = req.headers['x-forwarded-for'] || req.connection.remoteAddress;
  const url = req.protocol + '://' + req.get('host') + req.originalUrl;
  // console.log('\n::\n:::\n::::');
  // console.log(`${ip} calling ${req.method} ${url}`);
  // if (config.production !== 'true') {
  //   console.log('Body: ', req.body);
  // }
  next();
});

app.get('/', (req, res, next) => {
  sendResponse(res, 200, {
    message: `Aegle Health App API V1 on ${config.platform || 'Production'}`,
  });
});

app.use('/v1', require('./routes').app);

// catch 404 and forward to error handler
app.use((req, res, next) => {
  const err: any = new Error('Invalid endpoint');
  err.statusCode = 404;
  err.status = err.status || ErrorStatus.FAILED;
  next(err);
});

// error handler
app.use((err: any, req: any, res: any, next: any) => {
  // set locals, only providing error in development
  const error: any = {};
  error.message = err.message;
  // error.error = req.app.get("env") === "development" ? err : {};
  error.statusCode = err.statusCode ? err.statusCode : 500;
  error.status = err.status || ErrorStatus.FAILED;
  const url = req.protocol + '://' + req.get('host') + req.originalUrl;
  console.error({ errorUrl: url, error: err });
  console.log('Sending error \n::::\n:::\n::');
  res.status(error.statusCode);
  res.json(error);
});
const swaggerOptions = {
  swaggerDefinition: {
      info: {
          title: 'My API',
          version: '1.0.0',
          description: 'My Express API with autogenerated swagger doc'
      },
      servers: ["http://localhost:3000"]
  },
  apis: ["index.js"],  // specify the file(s) containing your endpoints
};

const swaggerDocs = swaggerJsDoc(swaggerOptions);
app.use('/api-docs', swaggerUi.serve, swaggerUi.setup(swaggerDocs));

app.listen(3000, () => {
  console.log('Server is running on port 3000');
});
module.exports = app;
